{"version":3,"sources":["webpack:///./sources/scss/sources/scss/style.scss","webpack:///./sources/scss/sources/scss/template/content.scss","webpack:///./sources/scss/node_modules/bootstrap/scss/mixins/_breakpoints.scss","webpack:///./sources/scss/sources/scss/template/header.scss"],"names":[],"mappings":"AAAA;;;;;;;GAOG;ACPH;EACE,gBAAe,EAChB;;AAED;EAEI,eAAc,EAKf;EAPH;IAKM,cAAa,EACd;;AAIL;EACE,mBAAkB;EAClB,WAAU,EACX;;AAED;EACE,mBAAkB;EAClB,WAAU,EACX;;AAED;EACE,mBAAkB;EAClB,WAAU,EACX;;AAED;EACE,eAAc;EACd,WAAU,EAYX;EAdD;IAKI,aAAY;IACZ,qDAAoD;IACpD,gBAAe;IACf,2BAA0B;IAC1B,YAAW;IACX,OAAM;IACN,4BAA2B;IAC3B,WAAU,EACX;;AAGH;EACE,cAAa,EACd;;AC6BG;ED1BF;IACE,gBAAe,EAChB;EAED;IACE,cAAa,EACd;EAED;IACE,eAAc;IACd,yBAAwB;IACxB,aAAY,EACb;EAED;IAEI,cAAa,EACd;;AEnEL;EACE,iBAAgB,EACjB","file":"style.css","sourcesContent":["/*!\n  Template Name:   \tCopify\n  Author:           Brandon Tassone\n  Author URI:       https://objectiv.co/\n  Description:  \tA theme inspired by Shopify.\n  Version:      \t3.0.0\n  Supports:         summary-background, order-pay, order-received, breadcrumb-colors\n */\n\n$grid-gutter-width: 10px;\n\n// scss-docs-start grid-breakpoints\n$grid-breakpoints: (\n    xs: 0,\n    sm: 576px,\n    md: 768px,\n    lg: 992px,\n    xl: 1200px,\n    xxl: 1400px\n) !default;\n\n@import \"~bootstrap/scss/mixins/breakpoints\";\n\n@import \"template/content\";\n@import \"template/header\";","#cfw {\n  margin-top: 2em;\n}\n\n#cfw-logo-container, #cfw-logo-container-mobile {\n  .cfw-logo {\n    padding-top: 0;\n\n    a {\n      margin-top: 0;\n    }\n  }\n}\n\n#cfw-cart-summary > *:not(#cfw-mobile-cart-header) {\n  position: relative;\n  z-index: 2;\n}\n\n#cfw-mobile-cart-header {\n  position: relative;\n  z-index: 2;\n}\n\n#cfw-cart-summary-content {\n  position: relative;\n  z-index: 2;\n}\n\n#cfw-cart-summary {\n  border-left: 0;\n  padding: 0;\n\n  &:before {\n    content: \" \";\n    background: var(--cfw-cart-summary-background-color);\n    position: fixed;\n    height: calc(100vh + 60px);\n    width: 100%;\n    top: 0;\n    border-left: 1px solid #eee;\n    z-index: 1;\n  }\n}\n\n#cfw-logo-container-mobile {\n  display: none;\n}\n\n@include media-breakpoint-down(lg) {\n  #cfw {\n    margin-top: 1em;\n  }\n  \n  #cfw-logo-container {\n    display: none;\n  }\n\n  #cfw-logo-container-mobile {\n    display: block;\n    width: calc(100% - 40px);\n    margin: auto;\n  }\n\n  #cfw-cart-summary {\n    &:before {\n      content: none;\n    }\n  }\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n","#cfw-header {\n  min-height: 60px;\n}"],"sourceRoot":""}